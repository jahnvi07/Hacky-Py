# Python program for implementation of heap Sort


def heapify(arr, N, i):
	largest = i # Initialize largest as root
	l = 2 * i + 1	 # left = 2*i + 1  #left of root
	r = 2 * i + 2	 # right = 2*i + 2  #right of root

	if l < N and arr[largest] < arr[l]:  #See if left child of root is less than size of heap and is greater than root
		largest = l

	if r < N and arr[largest] < arr[r]:    #See if right child of root is less than size of heap and is greater than root
		largest = r
    
	if largest != i:    #Exchange arr[i]<->arr[largest]
		arr[i], arr[largest] = arr[largest], arr[i] # swap
		heapify(arr, N, largest)  #Heapify the root to achieve max heap



# The main function to sort an array of given size
def heapSort(arr):
	N = len(arr)
  
	for i in range(N//2 - 1, -1, -1):     #Build a maxheap
		heapify(arr, N, i)

	#One by one extract elements
	for i in range(N-1, 0, -1):
		arr[i], arr[0] = arr[0], arr[i] # swap
		heapify(arr, i, 0)


# Driver's code
if __name__ == '__main__':
	arr = [12, 11, 13, 5, 6, 7]
	heapSort(arr)
	N = len(arr)

	print("Sorted array is")
	for i in range(N):
		print("%d" % arr[i], end=" ")
